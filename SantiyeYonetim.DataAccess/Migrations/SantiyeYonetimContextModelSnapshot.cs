// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SantiyeYonetim.DataAccess.Concrete.EntityFramework;

namespace SantiyeYonetim.DataAccess.Migrations
{
    [DbContext(typeof(SantiyeYonetimContext))]
    partial class SantiyeYonetimContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Semih İnşaat",
                            Description = "Description"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "Halil İnşaat",
                            Description = "Deneme Açıklaması"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "Hamza İnşaat",
                            Description = "Deneme Açıklaması2"
                        });
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProductionRowNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Productions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description",
                            Name = "HAFRİYAT",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description",
                            Name = "DOLGU",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description",
                            Name = "GROBETON",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description",
                            Name = "TEMEL MANTOLAMA",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description",
                            Name = "TEMEL BETONU",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description",
                            Name = "BODRUM BETONARME",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "Description",
                            Name = "BODRUM DRENAJ",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Description",
                            Name = "BODRUM PERDESİ İZOLASYONU",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "Description",
                            Name = "BETONARME İMALATI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 10,
                            Description = "Description",
                            Name = "PREKAST İMALATLARI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 11,
                            Description = "Description",
                            Name = "MERDİVEN PREKAST MONTAJI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 12,
                            Description = "Description",
                            Name = "DIŞ CEPHE PREKAST MONTAJI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 13,
                            Description = "Description",
                            Name = "ÇATI İŞLERİ",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 14,
                            Description = "Description",
                            Name = "İÇ DIŞ ÖRME DUVARLAR",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 15,
                            Description = "Description",
                            Name = "KARA SIVA ( İÇ - DIŞ )",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 16,
                            Description = "Description",
                            Name = "İÇ CEPHE ISI İZOLASYONU",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 17,
                            Description = "Description",
                            Name = "İÇ SIVA ( ALÇI)",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 18,
                            Description = "Description",
                            Name = "DIŞ CEPHE TAMİRATI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 19,
                            Description = "Description",
                            Name = "PREKAST BİRLEŞİM İZOLASYONU",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 20,
                            Description = "Description",
                            Name = "İÇ BOYA MACUNU",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 21,
                            Description = "Description",
                            Name = "KARTONPİYER",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 22,
                            Description = "Description",
                            Name = "DIŞ CEPHE ISI İZOLASYONU (MANTOLAMA)",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 23,
                            Description = "Description",
                            Name = "ŞAP + SES İZOLASYONU",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 24,
                            Description = "Description",
                            Name = "MERMER DENİZLİK",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 25,
                            Description = "Description",
                            Name = "FRANSIZ BALKON KORKULUK",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 26,
                            Description = "Description",
                            Name = "YANGIN MERDİVEN KORKULUK",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 27,
                            Description = "Description",
                            Name = "FAYANS İMALATI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 28,
                            Description = "Description",
                            Name = "MERMER İMALATI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 29,
                            Description = "Description",
                            Name = "SERAMİK İMALATLARI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 30,
                            Description = "Description",
                            Name = "PVC DOĞRAMA MONTAJI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 31,
                            Description = "Description",
                            Name = "CAM MONTAJI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 32,
                            Description = "Description",
                            Name = "MENFEZ MONTAJLARI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 33,
                            Description = "Description",
                            Name = "İÇ BOYA ASTARI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 34,
                            Description = "Description",
                            Name = "DIŞ BOYA",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 35,
                            Description = "Description",
                            Name = "MERDİVEN KORKULUĞU",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 36,
                            Description = "Description",
                            Name = "DAİRE GİRİŞ KAPILARI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 37,
                            Description = "Description",
                            Name = "ASMA TAVAN",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 38,
                            Description = "Description",
                            Name = "İÇ BOYA SON KAT",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 39,
                            Description = "Description",
                            Name = "DAİRE İÇ KAPILARI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 40,
                            Description = "Description",
                            Name = "ŞAFT KAPAK ve DOLAPLARI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 41,
                            Description = "Description",
                            Name = "MUTFAK DOLAPLARI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 42,
                            Description = "Description",
                            Name = "BANYO DOLAPLARI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 43,
                            Description = "Description",
                            Name = "PORTMANTO ve GÖMME DOLAP",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 44,
                            Description = "Description",
                            Name = "ANKASTRE BEYAZ EŞYA",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 45,
                            Description = "Description",
                            Name = "MDF SÜPÜRGELİK",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 46,
                            Description = "Description",
                            Name = "PARKE KAPLAMA",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 47,
                            Description = "Description",
                            Name = "KABA TEMİZLİK",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 48,
                            Description = "Description",
                            Name = "KABA TEMİZLİK",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 49,
                            Description = "Description",
                            Name = "HALI KAPLAMA",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 50,
                            Description = "Description",
                            Name = "DUŞAKABİN MONTAJI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 51,
                            Description = "Description",
                            Name = "BİNA GİRİŞ İMALATLARI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 52,
                            Description = "Description",
                            Name = "İNCE TEMİZLİK",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 53,
                            Description = "Description",
                            Name = "ELEKTRİK İMALATLARI (1. GRUP)",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 54,
                            Description = "Description",
                            Name = "ELEKTRİK ARMATÜR MONTAJI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 55,
                            Description = "Description",
                            Name = "ELEKTRİK İMALATLARI (2. GRUP)",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 56,
                            Description = "Description",
                            Name = "ELEKTRİK TEST",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 57,
                            Description = "Description",
                            Name = "SIHHİ TESİSAT",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 58,
                            Description = "Description",
                            Name = "YANGIN TESİSATI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 59,
                            Description = "Description",
                            Name = "KALORİFER TESİSATI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 60,
                            Description = "Description",
                            Name = "ASANSÖR RAY MONTAJI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 61,
                            Description = "Description",
                            Name = "ASANSÖR KAPI KASA MONTAJI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 62,
                            Description = "Description",
                            Name = "DOĞALGAZ TESİSATI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 63,
                            Description = "Description",
                            Name = "ASANSÖR MAKİNE MOTOR",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 64,
                            Description = "Description",
                            Name = "RADYATÖR PANEL MONTAJI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 65,
                            Description = "Description",
                            Name = "VİTRİFİYE ARMATÜR MONTAJI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 66,
                            Description = "Description",
                            Name = "ASANSÖR KABİN MONTAJI",
                            ProductionRowNumber = 1
                        },
                        new
                        {
                            Id = 67,
                            Description = "Description",
                            Name = "MEKANİK TEST",
                            ProductionRowNumber = 1
                        });
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProductionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SmallName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.ToTable("ProductionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "HAFRİYAT",
                            SmallName = "H"
                        },
                        new
                        {
                            Id = 2,
                            Name = "KABA İŞLER",
                            SmallName = "K"
                        },
                        new
                        {
                            Id = 3,
                            Name = "İNCE İŞLER",
                            SmallName = "İ"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ELEKTRİK İŞLERİ",
                            SmallName = "E"
                        },
                        new
                        {
                            Id = 5,
                            Name = "MAKİNE İŞLERİ",
                            SmallName = "M"
                        });
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectBlocks");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectFloor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProjectBlockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectBlockId");

                    b.ToTable("ProjectFloors");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectProduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminNote")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("CompletionStatus")
                        .HasColumnType("bit");

                    b.Property<string>("DrawingFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectProductionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TotalProductionDays")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedPeople")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNote")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("ProjectProductionTypeId");

                    b.ToTable("ProjectProductions");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectProductionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectProductionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectProductionId");

                    b.ToTable("ProjectProductionImages");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectProductionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectFloorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTypeId");

                    b.HasIndex("ProjectFloorId");

                    b.ToTable("ProjectProductionTypes");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description",
                            Name = "Konut Projesi"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description",
                            Name = "Hidroelektrik Santral Projesi"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description",
                            Name = "Hastane Projesi"
                        });
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f14eb7ba-176d-460d-a338-bac7eb12b579",
                            Description = "Admin Account",
                            Name = "Admin",
                            NormalizedName = "ADMİN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "d0cfa4d4-0781-4a43-80e6-5ac78065bf0f",
                            Description = "User Account",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "60a60eda-9854-4be3-abde-440fc9eaef77",
                            Description = "ProjectAdmin Account",
                            Name = "ProjectAdmin",
                            NormalizedName = "PROJECTADMİN"
                        });
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.Project", b =>
                {
                    b.HasOne("SantiyeYonetim.Entities.Concrete.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SantiyeYonetim.Entities.Concrete.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectBlock", b =>
                {
                    b.HasOne("SantiyeYonetim.Entities.Concrete.Project", "Project")
                        .WithMany("ProjectBlocks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectFloor", b =>
                {
                    b.HasOne("SantiyeYonetim.Entities.Concrete.ProjectBlock", "ProjectBlock")
                        .WithMany("ProjectFloors")
                        .HasForeignKey("ProjectBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectBlock");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectProduction", b =>
                {
                    b.HasOne("SantiyeYonetim.Entities.Concrete.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SantiyeYonetim.Entities.Concrete.ProjectProductionType", "ProjectProductionType")
                        .WithMany("ProjectProductions")
                        .HasForeignKey("ProjectProductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("ProjectProductionType");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectProductionImage", b =>
                {
                    b.HasOne("SantiyeYonetim.Entities.Concrete.ProjectProduction", "ProjectProduction")
                        .WithMany("ProjectProductionImages")
                        .HasForeignKey("ProjectProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectProduction");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectProductionType", b =>
                {
                    b.HasOne("SantiyeYonetim.Entities.Concrete.ProductionType", "ProductionType")
                        .WithMany()
                        .HasForeignKey("ProductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SantiyeYonetim.Entities.Concrete.ProjectFloor", "ProjectFloor")
                        .WithMany("ProjectProductionTypes")
                        .HasForeignKey("ProjectFloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionType");

                    b.Navigation("ProjectFloor");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("SantiyeYonetim.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("SantiyeYonetim.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("SantiyeYonetim.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("SantiyeYonetim.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SantiyeYonetim.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("SantiyeYonetim.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.Company", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.Project", b =>
                {
                    b.Navigation("ProjectBlocks");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectBlock", b =>
                {
                    b.Navigation("ProjectFloors");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectFloor", b =>
                {
                    b.Navigation("ProjectProductionTypes");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectProduction", b =>
                {
                    b.Navigation("ProjectProductionImages");
                });

            modelBuilder.Entity("SantiyeYonetim.Entities.Concrete.ProjectProductionType", b =>
                {
                    b.Navigation("ProjectProductions");
                });
#pragma warning restore 612, 618
        }
    }
}
